version: "3.8"

services:
  app:
    build:
      context: ./app
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file:
      - ./app/.env
    ports:
      - "8080:8080"
    depends_on:
      - database
      - rabbitmq
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 3s
      retries: 5

  # <-- ВАЖНО: контекст = корень проекта, dockerfile указываем из worker/
  worker:
    build:
      context: .
      dockerfile: ./worker/Dockerfile
    restart: unless-stopped
    env_file:
      - ./app/.env
    depends_on:
      - rabbitmq
      - database
    working_dir: /usr/src/app
    command: ["python", "-u", "worker/consumer.py"]
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import sys; sys.exit(0)\""]
      interval: 20s
      timeout: 5s
      retries: 3

  webui:
    build:
      context: ./app/webui
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8501:8501"
    environment:
      API_BASE: "http://app:8080"
    depends_on:
      - app

  rabbitmq:
    image: rabbitmq:3-management
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: rmuser
      RABBITMQ_DEFAULT_PASS: rmpassword
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10

  database:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: app_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 10

volumes:
  postgres_data:
  rabbitmq_data:
